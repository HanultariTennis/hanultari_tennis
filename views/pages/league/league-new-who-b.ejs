<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>한울타리 - 리그참가자</title>
  <link rel="stylesheet" href="/styles.css">
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const members = <%- JSON.stringify(members.map(member => member.name)) %>;

      function updateParticipantCount() {
        const memberCount = document.getElementById('participant-list').children.length;
        const guestCount = document.getElementById('guest-list').children.length;
        const totalCount = memberCount + guestCount;

        document.getElementById('member-count').textContent = `회원 (${memberCount}명)`;
        document.getElementById('guest-count').textContent = `게스트 (${guestCount}명)`;
        document.getElementById('total-count').textContent = `총원 ${totalCount}명`;
      }

      function addParticipant() {
        const participantInput = document.getElementById('participant-search');
        const participantName = participantInput.value.trim();

        if (!members.includes(participantName)) {
          alert('회원이 아닙니다.');
          return;
        }

        if (participantName) {
          const participantList = document.getElementById('participant-list');
          if (![...participantList.children].some(li => li.textContent.includes(participantName))) {
            const listItem = document.createElement('li');
            listItem.textContent = participantName;
            listItem.classList.add("list-group-item");
            listItem.classList.add("text-center");

            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'memberPlayers[]';
            hiddenInput.value = participantName;
            listItem.appendChild(hiddenInput);

            const deleteBtn = document.createElement('button');
            deleteBtn.innerHTML = '<i class="bi bi-x-circle-fill"></i>';
            deleteBtn.classList.add('btn');
            deleteBtn.classList.add('btn-outline-danger');
            deleteBtn.classList.add('border-0');
            deleteBtn.classList.add('btn-sm');
            deleteBtn.classList.add('ms-2');
            deleteBtn.onclick = function() {
              participantList.removeChild(listItem);
              updateParticipantCount();
            };
            listItem.appendChild(deleteBtn);

            participantList.appendChild(listItem);
            participantInput.value = '';
            updateParticipantCount();
          }
        }
      }

      function addGuest() {
        const guestInput = document.getElementById('guestPlayers');
        const guestName = guestInput.value.trim().replace(/\s+/g, '');
        if (guestName) {
          const guestList = document.getElementById('guest-list');
          if (![...guestList.children].some(li => li.textContent.includes(guestName))) {
            const listItem = document.createElement('li');
            listItem.textContent = guestName;
            listItem.classList.add("list-group-item");
            listItem.classList.add("text-center");

            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'guestPlayers[]';
            hiddenInput.value = guestName;
            listItem.appendChild(hiddenInput);

            const deleteBtn = document.createElement('button');
            deleteBtn.innerHTML = '<i class="bi bi-x-circle-fill"></i>';
            deleteBtn.classList.add('btn');
            deleteBtn.classList.add('btn-outline-danger');
            deleteBtn.classList.add('border-0');
            deleteBtn.classList.add('btn-sm');
            deleteBtn.classList.add('ms-2');
            deleteBtn.onclick = function() {
              guestList.removeChild(listItem);
              updateParticipantCount();
            };
            listItem.appendChild(deleteBtn);

            guestList.appendChild(listItem);
            guestInput.value = '';
            updateParticipantCount();
          }
        }
      }
      
      // 추가된 부분: 게스트 이름을 입력하고 엔터 키를 누르면 게스트 추가
    document.getElementById('guestPlayers').addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();  // 폼이 제출되지 않도록 기본 동작 방지
            addGuest();
        }
    });

      function autocomplete(inp, arr) {
        var currentFocus;
        inp.addEventListener("input", function(e) {
          var a, b, i, val = this.value;
          closeAllLists();
          if (!val) { return false; }
          currentFocus = -1;
          a = document.createElement("DIV");
          a.setAttribute("id", this.id + "autocomplete-list");
          a.setAttribute("class", "autocomplete-items");
          this.parentNode.appendChild(a);
          for (i = 0; i < arr.length; i++) {
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
              b = document.createElement("DIV");
              b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
              b.innerHTML += arr[i].substr(val.length);
              b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
              b.addEventListener("click", function(e) {
                inp.value = this.getElementsByTagName("input")[0].value;
                closeAllLists();
              });
              a.appendChild(b);
            }
          }
        });
        inp.addEventListener("keydown", function(e) {
          var x = document.getElementById(this.id + "autocomplete-list");
          if (x) x = x.getElementsByTagName("div");
          if (e.keyCode == 40) {
            currentFocus++;
            addActive(x);
          } else if (e.keyCode == 38) {
            currentFocus--;
            addActive(x);
          } else if (e.keyCode == 13) {
            e.preventDefault();
            if (currentFocus > -1) {
              if (x) x[currentFocus].click();
            }
          }
        });

        function addActive(x) {
          if (!x) return false;
          removeActive(x);
          if (currentFocus >= x.length) currentFocus = 0;
          if (currentFocus < 0) currentFocus = (x.length - 1);
          // x[currentFocus].classList.add("autocomplete-active");
          x[currentFocus].classList.add("list-group-item");
        }

        function removeActive(x) {
          for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
          }
        }

        function closeAllLists(elmnt) {
          var x = document.getElementsByClassName("autocomplete-items");
          for (var i = 0; i < x.length; i++) {
            if (elmnt != x[i] && elmnt != inp) {
              x[i].parentNode.removeChild(x[i]);
            }
          }
        }

        document.addEventListener("click", function(e) {
          closeAllLists(e.target);
        });
      }

      // autocomplete(document.getElementById("participant-search"), members);

      document.getElementById('add-participant-btn').addEventListener('click', addParticipant);
      document.getElementById('add-guest-btn').addEventListener('click', addGuest);
      document.getElementById('participant-search').addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          addParticipant();
        }
      });

      document.getElementById('player-form').addEventListener('submit', function(e) {
        const participantCount = document.getElementById('participant-list').children.length + document.getElementById('guest-list').children.length;
        const selectedFormat = "<%= selectedFormat %>";

        if (participantCount < 4) {
          alert('리그 최소 인원은 4 명입니다.');
          e.preventDefault();
        } else if (participantCount > 16) {
          alert('리그 최대 인원은 16 명입니다.');
          e.preventDefault();
        } else if ((selectedFormat == "한울AB") &&
        ((participantCount != 8) &&
        (participantCount != 10) &&
        (participantCount != 12) &&
        (participantCount != 14) &&
        (participantCount != 16))) {
          alert('한울 AB 방식에 적합한 인원은 8, 10, 12, 14, 16 명입니다.')
          e.preventDefault();
        }
      });

      // 초기 카운트 설정
      updateParticipantCount();
    });
  </script>
  <style>
    #total-count {
      text-align: center;
      font-weight: bold;
      margin-top: 20px;
      font-size: 20px
    }
  </style>
</head>
<body>
  <%- include('../../partials/header.ejs') %>
  <main>
    <div class="container mt-3">
      <h5 class="d-flex justify-content-center">리그생성</h5>

      <div class=" d-flex mt-3 mb-3 justify-content-between">
        <div class="stepper-item completed">
          <div class="step-counter">1</div>
          <div class="step-name">기본정보</div>
        </div>
        <div class="stepper-item completed">
          <div class="step-counter">2</div>
          <div class="step-name">참가자</div>
        </div>
        <div class="stepper-item">
          <div class="step-counter">3</div>
          <div class="step-name">시드</div>
        </div>
        <div class="stepper-item">
          <div class="step-counter">4</div>
          <div class="step-name">확정</div>
        </div>
      </div>

      <div>
        <p id="total-count">총원 0명</p>
      </div>
      <form id="player-form" action="/league/new/who" method="POST">
        <div class="d-flex mb-5">
          <div>
            <label id="member-count" class="mb-3">회원 선택 (0명)</label>
            <div class="input-group mb-3 participant-search-container">
              <input class="form-control" list="datalistOptions" id="participant-search" placeholder="회원 검색">
              <datalist id="datalistOptions">
                <% members.forEach(member => { %>
                  <option value="<%= member.name %>"><%= member.name %></option>
                <% }) %>
              </datalist>
              <button class="btn btn-outline-warning btn-warning text-black" type="button" id="add-participant-btn">추가</button>
            </div>

            <div class="border border-warning">
              <ul id="participant-list" class="list-group list-group-flush border-warning"></ul>
            </div>
            
          </div>
          <div class="ms-1 me-1"></div>
          <div>
            <label id="guest-count" class="mb-3" for="guestPlayers">게스트 입력 (0명)</label>
            <div class="input-group mb-3">
              <input type="text" class="form-control" placeholder="이름 입력" aria-label="Recipient's username" aria-describedby="add-guest-btn" id="guestPlayers" >
              <button class="btn btn-outline-warning btn-warning text-black" type="button" id="add-guest-btn">추가</button>
            </div>

            <div class="border border-warning">
              <ul id="guest-list" class="list-group list-group-flush"></ul>
            </div>

          </div>
        </div>
        <div class="d-flex justify-content-center">
          <button type="submit" class="btn btn-warning w-50">다음단계</button>
          <div class="ms-1 me-1"></div>
      </form>
          <button type="button" class="btn btn-secondary w-50" onclick="window.history.back()">뒤로가기</button>
        </div>  
    </div>
    <div style="height: 100px;"></div>
  </main>
  <%- include('../../partials/footer.ejs') %>
</body>
</html>
